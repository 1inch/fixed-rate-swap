{
  "address": "0x5D0EC1F843c1233D304B96DbDE0CAB9Ec04D71EF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token0",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token1",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals_",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token0Amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token1Amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "token0Amount",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "token1Amount",
          "type": "int256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token0Amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token1Amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "token0Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minShare",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "token0Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1Amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minShare",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenFrom",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenTo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        }
      ],
      "name": "getReturn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReturnAmount",
          "type": "uint256"
        }
      ],
      "name": "swap0To1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minReturnAmount",
          "type": "uint256"
        }
      ],
      "name": "swap0To1For",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReturnAmount",
          "type": "uint256"
        }
      ],
      "name": "swap1To0",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minReturnAmount",
          "type": "uint256"
        }
      ],
      "name": "swap1To0For",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minToken0Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minToken1Amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "token0Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1Amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minToken0Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minToken1Amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "token0Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1Amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "token0Share",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minToken0Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minToken1Amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawForWithRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "token0Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1Amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token0Share",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minToken0Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minToken1Amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawWithRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "token0Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1Amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa2e69f2523dd7f4520b6221750e85ef55a677fbe7ab6868977dda35e2d60650c",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0x5D0EC1F843c1233D304B96DbDE0CAB9Ec04D71EF",
    "transactionIndex": 83,
    "gasUsed": "2894960",
    "logsBloom": "0x
    "blockHash": "0x8fad28c0461777616aeed02568d1ee34ce2d0d34afe1074f4c7f29294450edfe",
    "transactionHash": "0xa2e69f2523dd7f4520b6221750e85ef55a677fbe7ab6868977dda35e2d60650c",
    "logs": [
      {
        "transactionIndex": 83,
        "blockNumber": 21923486,
        "transactionHash": "0xa2e69f2523dd7f4520b6221750e85ef55a677fbe7ab6868977dda35e2d60650c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47",
          "0x000000000000000000000000b79fad4ca981472442f53d16365fdf0305ffd8e9"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001348c86012b40000000000000000000000000000000000000000000000000000c85fda3f59f320000000000000000000000000000000000000000000000a7daa7dedd5e481f52390000000000000000000000000000000000000000000000000b51711df473f20000000000000000000000000000000000000000000000a7daa91369e4494a9239",
        "logIndex": 914,
        "blockHash": "0x8fad28c0461777616aeed02568d1ee34ce2d0d34afe1074f4c7f29294450edfe"
      }
    ],
    "blockNumber": 21923486,
    "cumulativeGasUsed": "20363400",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
    "0xc2132D05D31c914a87C6611C10748AEb04B58e8F",
    "FixedRateSwap",
    "FRS",
    6
  ],
  "solcInputHash": "2445d7b873241221d1d800222d2189f8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token1Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"token0Amount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"token1Amount\",\"type\":\"int256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token1Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minShare\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minShare\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"name\":\"getReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"}],\"name\":\"swap0To1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"}],\"name\":\"swap0To1For\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"}],\"name\":\"swap1To0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"}],\"name\":\"swap1To0For\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minToken0Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minToken1Amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minToken0Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minToken1Amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token0Share\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minToken0Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minToken1Amount\",\"type\":\"uint256\"}],\"name\":\"withdrawForWithRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0Share\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minToken0Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minToken1Amount\",\"type\":\"uint256\"}],\"name\":\"withdrawWithRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"AMM that is designed for assets with stable price to each other e.g. USDC and USDT. It utilizes constant sum price curve x + y = const but fee is variable depending on the token balances. In most cases fee is equal to 1 bip. But when balances are at extreme ends it either lowers to 0 or increases to 20 bip. Fee calculations are explained in more details in `getReturn` method. Note that AMM does not support token with fees. Note that tokens decimals are required to be the same.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256,uint256,uint256)\":{\"params\":{\"minShare\":\"minimal required amount of LP tokens received\",\"token0Amount\":\"amount of token0 to deposit\",\"token1Amount\":\"amount of token1 to deposit\"},\"returns\":{\"share\":\"amount of LP tokens received\"}},\"depositFor(uint256,uint256,address,uint256)\":{\"details\":\"fully balanced deposit happens when ratio of amounts of deposit matches ratio of balances. To make a fair deposit when ratios do not match the contract finds the amount that is needed to swap to equalize ratios and makes that swap virtually to capture the swap fees. Then final share is calculated from fair deposit of virtual amounts.\",\"params\":{\"minShare\":\"minimal required amount of LP tokens received\",\"to\":\"address that will receive tokens\",\"token0Amount\":\"amount of token0 to deposit\",\"token1Amount\":\"amount of token1 to deposit\"},\"returns\":{\"share\":\"amount of LP tokens received\"}},\"getReturn(address,address,uint256)\":{\"details\":\"`getReturn` at point `x = inputBalance / (inputBalance + outputBalance)`: `getReturn(x) = 0.9999 + (0.5817091329374359 - x * 1.2734233188154198)^17` When balance is changed from `inputBalance` to `inputBalance + amount` we should take integral of getReturn to calculate proper amount: `getReturn(x0, x1) = (integral (0.9999 + (0.5817091329374359 - x * 1.2734233188154198)^17) dx from x=x0 to x=x1) / (x1 - x0)` `getReturn(x0, x1) = (0.9999 * x - 3.3827123349983306 * (x - 0.4568073509746632) ** 18 from x=x0 to x=x1) / (x1 - x0)` `getReturn(x0, x1) = (0.9999 * (x1 - x0) + 3.3827123349983306 * ((x0 - 0.4568073509746632) ** 18 - (x1 - 0.4568073509746632) ** 18)) / (x1 - x0)` C0 = 0.9999 C2 = 3.3827123349983306 C3 = 0.4568073509746632 `getReturn(x0, x1) = (C0 * (x1 - x0) + C2 * ((x0 - C3) ** 18 - (x1 - C3) ** 18)) / (x1 - x0)`\",\"params\":{\"inputAmount\":\"amount of `tokenFrom` that user wants to sell\",\"tokenFrom\":\"token that user wants to sell\",\"tokenTo\":\"token that user wants to buy\"},\"returns\":{\"outputAmount\":\"amount of `tokenTo` that user will receive after the trade\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"swap0To1(uint256,uint256)\":{\"params\":{\"inputAmount\":\"amount of token0 to sell\",\"minReturnAmount\":\"minimal required amount of token1 to buy\"},\"returns\":{\"outputAmount\":\"amount of token1 bought\"}},\"swap0To1For(uint256,address,uint256)\":{\"params\":{\"inputAmount\":\"amount of token0 to sell\",\"minReturnAmount\":\"minimal required amount of token1 to buy\",\"to\":\"address that will receive tokens\"},\"returns\":{\"outputAmount\":\"amount of token1 bought\"}},\"swap1To0(uint256,uint256)\":{\"params\":{\"inputAmount\":\"amount of token1 to sell\",\"minReturnAmount\":\"minimal required amount of token0 to buy\"},\"returns\":{\"outputAmount\":\"amount of token0 bought\"}},\"swap1To0For(uint256,address,uint256)\":{\"params\":{\"inputAmount\":\"amount of token1 to sell\",\"minReturnAmount\":\"minimal required amount of token0 to buy\",\"to\":\"address that will receive tokens\"},\"returns\":{\"outputAmount\":\"amount of token0 bought\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"withdraw(uint256,uint256,uint256)\":{\"params\":{\"amount\":\"amount of LP tokens to burn\",\"minToken0Amount\":\"minimal required amount of token0\",\"minToken1Amount\":\"minimal required amount of token1\"},\"returns\":{\"token0Amount\":\"amount of token0 received\",\"token1Amount\":\"amount of token1 received\"}},\"withdrawFor(uint256,address,uint256,uint256)\":{\"params\":{\"amount\":\"amount of LP tokens to burn\",\"minToken0Amount\":\"minimal required amount of token0\",\"minToken1Amount\":\"minimal required amount of token1\",\"to\":\"address that will receive tokens\"},\"returns\":{\"token0Amount\":\"amount of token0 received\",\"token1Amount\":\"amount of token1 received\"}},\"withdrawForWithRatio(uint256,address,uint256,uint256,uint256)\":{\"details\":\"withdrawal with custom ratio is semantically equal to proportional withdrawal with extra swap afterwards to get to the specified ratio. The contract does exactly this by making virtual proportional withdrawal and then finds the amount needed for an extra virtual swap to achieve specified ratio.\",\"params\":{\"amount\":\"amount of LP tokens to burn\",\"minToken0Amount\":\"minimal required amount of token0\",\"minToken1Amount\":\"minimal required amount of token1\",\"to\":\"address that will receive tokens\",\"token0Share\":\"percentage of token0 to receive with 100% equals to 1e18\"},\"returns\":{\"token0Amount\":\"amount of token0 received\",\"token1Amount\":\"amount of token1 received\"}},\"withdrawWithRatio(uint256,uint256,uint256,uint256)\":{\"params\":{\"amount\":\"amount of LP tokens to burn\",\"minToken0Amount\":\"minimal required amount of token0\",\"minToken1Amount\":\"minimal required amount of token1\",\"token0Share\":\"percentage of token0 to receive with 100% equals to 1e18\"},\"returns\":{\"token0Amount\":\"amount of token0 received\",\"token1Amount\":\"amount of token1 received\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(uint256,uint256,uint256)\":{\"notice\":\"makes a deposit of both tokens to the AMM\"},\"depositFor(uint256,uint256,address,uint256)\":{\"notice\":\"makes a deposit of both tokens to the AMM and transfers LP tokens to the specified address\"},\"getReturn(address,address,uint256)\":{\"notice\":\"estimates return value of the swap\"},\"swap0To1(uint256,uint256)\":{\"notice\":\"swaps token0 for token1\"},\"swap0To1For(uint256,address,uint256)\":{\"notice\":\"swaps token0 for token1 and transfers them to specified receiver address\"},\"swap1To0(uint256,uint256)\":{\"notice\":\"swaps token1 for token0\"},\"swap1To0For(uint256,address,uint256)\":{\"notice\":\"swaps token1 for token0 and transfers them to specified receiver address\"},\"withdraw(uint256,uint256,uint256)\":{\"notice\":\"makes a proportional withdrawal of both tokens\"},\"withdrawFor(uint256,address,uint256,uint256)\":{\"notice\":\"makes a proportional withdrawal of both tokens and transfers them to the specified address\"},\"withdrawForWithRatio(uint256,address,uint256,uint256,uint256)\":{\"notice\":\"makes a withdrawal with custom ratio and transfers tokens to the specified address\"},\"withdrawWithRatio(uint256,uint256,uint256,uint256)\":{\"notice\":\"makes a withdrawal with custom ratio\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FixedRateSwap.sol\":\"FixedRateSwap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x53a0bb51b8a505e04aaf065de27c0e31cadf38194f8a9a6ec92b7bcd3c5826e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x842c66d5965ed0bf77f274732c2a93a7e2223d53171ec9cccc473bde75104ead\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xe936fc79332de2ca7b1c06a70f81345aa2466958aab00f463e312ca0585e85cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x47c0131bd8a972c31596958aa86752ea18d60e33f1cd94d412b9e29fd6ab25a6\",\"license\":\"MIT\"},\"contracts/FixedRateSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n\\n/**\\n  * @dev AMM that is designed for assets with stable price to each other e.g. USDC and USDT.\\n  * It utilizes constant sum price curve x + y = const but fee is variable depending on the token balances.\\n  * In most cases fee is equal to 1 bip. But when balances are at extreme ends it either lowers to 0\\n  * or increases to 20 bip.\\n  * Fee calculations are explained in more details in `getReturn` method.\\n  * Note that AMM does not support token with fees.\\n  * Note that tokens decimals are required to be the same.\\n */\\ncontract FixedRateSwap is ERC20 {\\n    using SafeERC20 for IERC20;\\n    using SafeCast for uint256;\\n\\n    event Swap(\\n        address indexed trader,\\n        int256 token0Amount,\\n        int256 token1Amount\\n    );\\n\\n    event Deposit(\\n        address indexed user,\\n        uint256 token0Amount,\\n        uint256 token1Amount,\\n        uint256 share\\n    );\\n\\n    event Withdrawal(\\n        address indexed user,\\n        uint256 token0Amount,\\n        uint256 token1Amount,\\n        uint256 share\\n    );\\n\\n    IERC20 immutable public token0;\\n    IERC20 immutable public token1;\\n\\n    uint8 immutable private _decimals;\\n\\n    uint256 constant private _ONE = 1e18;\\n    uint256 constant private _C1 = 0.9999e18;\\n    uint256 constant private _C2 = 3.382712334998325432e18;\\n    uint256 constant private _C3 = 0.456807350974663119e18;\\n    uint256 constant private _THRESHOLD = 1;\\n    uint256 constant private _LOWER_BOUND_NUMERATOR = 998;\\n    uint256 constant private _UPPER_BOUND_NUMERATOR = 1002;\\n    uint256 constant private _DENOMINATOR = 1000;\\n\\n    constructor(\\n        IERC20 _token0,\\n        IERC20 _token1,\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals_\\n    )\\n        ERC20(name, symbol)\\n    {\\n        token0 = _token0;\\n        token1 = _token1;\\n        _decimals = decimals_;\\n        require(IERC20Metadata(address(_token0)).decimals() == decimals_, \\\"token0 decimals mismatch\\\");\\n        require(IERC20Metadata(address(_token1)).decimals() == decimals_, \\\"token1 decimals mismatch\\\");\\n    }\\n\\n    function decimals() public view override returns(uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @notice estimates return value of the swap\\n     * @param tokenFrom token that user wants to sell\\n     * @param tokenTo token that user wants to buy\\n     * @param inputAmount amount of `tokenFrom` that user wants to sell\\n     * @return outputAmount amount of `tokenTo` that user will receive after the trade\\n     *\\n     * @dev\\n     * `getReturn` at point `x = inputBalance / (inputBalance + outputBalance)`:\\n     * `getReturn(x) = 0.9999 + (0.5817091329374359 - x * 1.2734233188154198)^17`\\n     * When balance is changed from `inputBalance` to `inputBalance + amount` we should take\\n     * integral of getReturn to calculate proper amount:\\n     * `getReturn(x0, x1) = (integral (0.9999 + (0.5817091329374359 - x * 1.2734233188154198)^17) dx from x=x0 to x=x1) / (x1 - x0)`\\n     * `getReturn(x0, x1) = (0.9999 * x - 3.3827123349983306 * (x - 0.4568073509746632) ** 18 from x=x0 to x=x1) / (x1 - x0)`\\n     * `getReturn(x0, x1) = (0.9999 * (x1 - x0) + 3.3827123349983306 * ((x0 - 0.4568073509746632) ** 18 - (x1 - 0.4568073509746632) ** 18)) / (x1 - x0)`\\n     * C0 = 0.9999\\n     * C2 = 3.3827123349983306\\n     * C3 = 0.4568073509746632\\n     * `getReturn(x0, x1) = (C0 * (x1 - x0) + C2 * ((x0 - C3) ** 18 - (x1 - C3) ** 18)) / (x1 - x0)`\\n     */\\n    function getReturn(IERC20 tokenFrom, IERC20 tokenTo, uint256 inputAmount) public view returns(uint256 outputAmount) {\\n        require(inputAmount > 0, \\\"Input amount should be > 0\\\");\\n        uint256 fromBalance = tokenFrom.balanceOf(address(this));\\n        uint256 toBalance = tokenTo.balanceOf(address(this));\\n        // require is needed to be sure that _getReturn math won't overflow\\n        require(inputAmount <= toBalance, \\\"Input amount is too big\\\");\\n        outputAmount = _getReturn(fromBalance, toBalance, inputAmount);\\n    }\\n\\n    /**\\n     * @notice makes a deposit of both tokens to the AMM\\n     * @param token0Amount amount of token0 to deposit\\n     * @param token1Amount amount of token1 to deposit\\n     * @param minShare minimal required amount of LP tokens received\\n     * @return share amount of LP tokens received\\n     */\\n    function deposit(uint256 token0Amount, uint256 token1Amount, uint256 minShare) external returns(uint256 share) {\\n        share = depositFor(token0Amount, token1Amount, msg.sender, minShare);\\n    }\\n\\n    /**\\n     * @notice makes a deposit of both tokens to the AMM and transfers LP tokens to the specified address\\n     * @param token0Amount amount of token0 to deposit\\n     * @param token1Amount amount of token1 to deposit\\n     * @param to address that will receive tokens\\n     * @param minShare minimal required amount of LP tokens received\\n     * @return share amount of LP tokens received\\n     *\\n     * @dev fully balanced deposit happens when ratio of amounts of deposit matches ratio of balances.\\n     * To make a fair deposit when ratios do not match the contract finds the amount that is needed to swap to\\n     * equalize ratios and makes that swap virtually to capture the swap fees. Then final share is calculated from\\n     * fair deposit of virtual amounts.\\n     */\\n    function depositFor(uint256 token0Amount, uint256 token1Amount, address to, uint256 minShare) public returns(uint256 share) {\\n        uint256 token0Balance = token0.balanceOf(address(this));\\n        uint256 token1Balance = token1.balanceOf(address(this));\\n        (uint256 token0VirtualAmount, uint256 token1VirtualAmount) = _getVirtualAmountsForDeposit(token0Amount, token1Amount, token0Balance, token1Balance);\\n\\n        uint256 inputAmount = token0VirtualAmount + token1VirtualAmount;\\n        require(inputAmount > 0, \\\"Empty deposit is not allowed\\\");\\n        require(to != address(this), \\\"Deposit to this is forbidden\\\");\\n        // _mint also checks require(to != address(0))\\n\\n        uint256 _totalSupply = totalSupply();\\n        if (_totalSupply > 0) {\\n            uint256 totalBalance = token0Balance + token1Balance + token0Amount + token1Amount - inputAmount;\\n            share = inputAmount * _totalSupply / totalBalance;\\n        } else {\\n            share = inputAmount;\\n        }\\n\\n        require(share >= minShare, \\\"Share is not enough\\\");\\n        _mint(to, share);\\n        emit Deposit(to, token0Amount, token1Amount, share);\\n\\n        if (token0Amount > 0) {\\n            token0.safeTransferFrom(msg.sender, address(this), token0Amount);\\n        }\\n        if (token1Amount > 0) {\\n            token1.safeTransferFrom(msg.sender, address(this), token1Amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice makes a proportional withdrawal of both tokens\\n     * @param amount amount of LP tokens to burn\\n     * @param minToken0Amount minimal required amount of token0\\n     * @param minToken1Amount minimal required amount of token1\\n     * @return token0Amount amount of token0 received\\n     * @return token1Amount amount of token1 received\\n     */\\n    function withdraw(uint256 amount, uint256 minToken0Amount, uint256 minToken1Amount) external returns(uint256 token0Amount, uint256 token1Amount) {\\n        (token0Amount, token1Amount) = withdrawFor(amount, msg.sender, minToken0Amount, minToken1Amount);\\n    }\\n\\n    /**\\n     * @notice makes a proportional withdrawal of both tokens and transfers them to the specified address\\n     * @param amount amount of LP tokens to burn\\n     * @param to address that will receive tokens\\n     * @param minToken0Amount minimal required amount of token0\\n     * @param minToken1Amount minimal required amount of token1\\n     * @return token0Amount amount of token0 received\\n     * @return token1Amount amount of token1 received\\n     */\\n    function withdrawFor(uint256 amount, address to, uint256 minToken0Amount, uint256 minToken1Amount) public returns(uint256 token0Amount, uint256 token1Amount) {\\n        require(amount > 0, \\\"Empty withdrawal is not allowed\\\");\\n        require(to != address(this), \\\"Withdrawal to this is forbidden\\\");\\n        require(to != address(0), \\\"Withdrawal to zero is forbidden\\\");\\n\\n        uint256 _totalSupply = totalSupply();\\n        _burn(msg.sender, amount);\\n        token0Amount = token0.balanceOf(address(this)) * amount / _totalSupply;\\n        token1Amount = token1.balanceOf(address(this)) * amount / _totalSupply;\\n        _handleWithdraw(to, amount, token0Amount, token1Amount, minToken0Amount, minToken1Amount);\\n    }\\n\\n    /**\\n     * @notice makes a withdrawal with custom ratio\\n     * @param amount amount of LP tokens to burn\\n     * @param token0Share percentage of token0 to receive with 100% equals to 1e18\\n     * @param minToken0Amount minimal required amount of token0\\n     * @param minToken1Amount minimal required amount of token1\\n     * @return token0Amount amount of token0 received\\n     * @return token1Amount amount of token1 received\\n     */\\n    function withdrawWithRatio(uint256 amount, uint256 token0Share, uint256 minToken0Amount, uint256 minToken1Amount) external returns(uint256 token0Amount, uint256 token1Amount) {\\n        return withdrawForWithRatio(amount, msg.sender, token0Share, minToken0Amount, minToken1Amount);\\n    }\\n\\n    /**\\n     * @notice makes a withdrawal with custom ratio and transfers tokens to the specified address\\n     * @param amount amount of LP tokens to burn\\n     * @param to address that will receive tokens\\n     * @param token0Share percentage of token0 to receive with 100% equals to 1e18\\n     * @param minToken0Amount minimal required amount of token0\\n     * @param minToken1Amount minimal required amount of token1\\n     * @return token0Amount amount of token0 received\\n     * @return token1Amount amount of token1 received\\n     *\\n     * @dev withdrawal with custom ratio is semantically equal to proportional withdrawal with extra swap afterwards to\\n     * get to the specified ratio. The contract does exactly this by making virtual proportional withdrawal and then\\n     * finds the amount needed for an extra virtual swap to achieve specified ratio.\\n     */\\n    function withdrawForWithRatio(uint256 amount, address to, uint256 token0Share, uint256 minToken0Amount, uint256 minToken1Amount) public returns(uint256 token0Amount, uint256 token1Amount) {\\n        require(amount > 0, \\\"Empty withdrawal is not allowed\\\");\\n        require(to != address(this), \\\"Withdrawal to this is forbidden\\\");\\n        require(to != address(0), \\\"Withdrawal to zero is forbidden\\\");\\n        require(token0Share <= _ONE, \\\"Ratio should be in [0, 1]\\\");\\n\\n        uint256 _totalSupply = totalSupply();\\n        // burn happens before amounts calculations intentionally \\u2014 to validate amount\\n        _burn(msg.sender, amount);\\n        (token0Amount, token1Amount) = _getRealAmountsForWithdraw(amount, token0Share, _totalSupply);\\n        _handleWithdraw(to, amount, token0Amount, token1Amount, minToken0Amount, minToken1Amount);\\n    }\\n\\n    /**\\n     * @notice swaps token0 for token1\\n     * @param inputAmount amount of token0 to sell\\n     * @param minReturnAmount minimal required amount of token1 to buy\\n     * @return outputAmount amount of token1 bought\\n     */\\n    function swap0To1(uint256 inputAmount, uint256 minReturnAmount) external returns(uint256 outputAmount) {\\n        outputAmount = _swap(token0, token1, inputAmount, msg.sender, minReturnAmount);\\n        emit Swap(msg.sender, inputAmount.toInt256(), -outputAmount.toInt256());\\n    }\\n\\n    /**\\n     * @notice swaps token1 for token0\\n     * @param inputAmount amount of token1 to sell\\n     * @param minReturnAmount minimal required amount of token0 to buy\\n     * @return outputAmount amount of token0 bought\\n     */\\n    function swap1To0(uint256 inputAmount, uint256 minReturnAmount) external returns(uint256 outputAmount) {\\n        outputAmount = _swap(token1, token0, inputAmount, msg.sender, minReturnAmount);\\n        emit Swap(msg.sender, -outputAmount.toInt256(), inputAmount.toInt256());\\n    }\\n\\n    /**\\n     * @notice swaps token0 for token1 and transfers them to specified receiver address\\n     * @param inputAmount amount of token0 to sell\\n     * @param to address that will receive tokens\\n     * @param minReturnAmount minimal required amount of token1 to buy\\n     * @return outputAmount amount of token1 bought\\n     */\\n    function swap0To1For(uint256 inputAmount, address to, uint256 minReturnAmount) external returns(uint256 outputAmount) {\\n        require(to != address(this), \\\"Swap to this is forbidden\\\");\\n        require(to != address(0), \\\"Swap to zero is forbidden\\\");\\n\\n        outputAmount = _swap(token0, token1, inputAmount, to, minReturnAmount);\\n        emit Swap(msg.sender, inputAmount.toInt256(), -outputAmount.toInt256());\\n    }\\n\\n    /**\\n     * @notice swaps token1 for token0 and transfers them to specified receiver address\\n     * @param inputAmount amount of token1 to sell\\n     * @param to address that will receive tokens\\n     * @param minReturnAmount minimal required amount of token0 to buy\\n     * @return outputAmount amount of token0 bought\\n     */\\n    function swap1To0For(uint256 inputAmount, address to, uint256 minReturnAmount) external returns(uint256 outputAmount) {\\n        require(to != address(this), \\\"Swap to this is forbidden\\\");\\n        require(to != address(0), \\\"Swap to zero is forbidden\\\");\\n\\n        outputAmount = _swap(token1, token0, inputAmount, to, minReturnAmount);\\n        emit Swap(msg.sender, -outputAmount.toInt256(), inputAmount.toInt256());\\n    }\\n\\n    function _getVirtualAmountsForDeposit(uint256 token0Amount, uint256 token1Amount, uint256 token0Balance, uint256 token1Balance)\\n        private pure returns(uint256 token0VirtualAmount, uint256 token1VirtualAmount)\\n    {\\n        int256 shift = _checkVirtualAmountsFormula(token0Amount, token1Amount, token0Balance, token1Balance);\\n        if (shift > 0) {\\n            (token0VirtualAmount, token1VirtualAmount) = _getVirtualAmountsForDepositImpl(token0Amount, token1Amount, token0Balance, token1Balance);\\n        } else if (shift < 0) {\\n            (token1VirtualAmount, token0VirtualAmount) = _getVirtualAmountsForDepositImpl(token1Amount, token0Amount, token1Balance, token0Balance);\\n        } else {\\n            (token0VirtualAmount, token1VirtualAmount) = (token0Amount, token1Amount);\\n        }\\n    }\\n\\n    function _getRealAmountsForWithdraw(uint256 amount, uint256 token0Share, uint256 _totalSupply) private view returns(uint256 token0RealAmount, uint256 token1RealAmount) {\\n        uint256 token0Balance = token0.balanceOf(address(this));\\n        uint256 token1Balance = token1.balanceOf(address(this));\\n        uint256 token0VirtualAmount = token0Balance * amount / _totalSupply;\\n        uint256 token1VirtualAmount = token1Balance * amount / _totalSupply;\\n\\n        uint256 currentToken0Share = token0VirtualAmount * _ONE / (token0VirtualAmount + token1VirtualAmount);\\n        if (token0Share < currentToken0Share) {\\n            (token0RealAmount, token1RealAmount) = _getRealAmountsForWithdrawImpl(token0VirtualAmount, token1VirtualAmount, token0Balance - token0VirtualAmount, token1Balance - token1VirtualAmount, token0Share);\\n        } else if (token0Share > currentToken0Share) {\\n            (token1RealAmount, token0RealAmount) = _getRealAmountsForWithdrawImpl(token1VirtualAmount, token0VirtualAmount, token1Balance - token1VirtualAmount, token0Balance - token0VirtualAmount, _ONE - token0Share);\\n        } else {\\n            (token0RealAmount, token1RealAmount) = (token0VirtualAmount, token1VirtualAmount);\\n        }\\n    }\\n\\n    function _getReturn(uint256 fromBalance, uint256 toBalance, uint256 inputAmount) private pure returns(uint256 outputAmount) {\\n        unchecked {\\n            uint256 totalBalance = fromBalance + toBalance;\\n            uint256 x0 = _ONE * fromBalance / totalBalance;\\n            uint256 x1 = _ONE * (fromBalance + inputAmount) / totalBalance;\\n            uint256 scaledInputAmount = _ONE * inputAmount;\\n            uint256 amountMultiplier = (\\n                _C1 * scaledInputAmount / totalBalance +\\n                _C2 * _powerHelper(x0) -\\n                _C2 * _powerHelper(x1)\\n            ) * totalBalance / scaledInputAmount;\\n            outputAmount = inputAmount * Math.min(amountMultiplier, _ONE) / _ONE;\\n        }\\n    }\\n\\n    function _handleWithdraw(address to, uint256 amount, uint256 token0Amount, uint256 token1Amount, uint256 minToken0Amount, uint256 minToken1Amount) private {\\n        require(token0Amount >= minToken0Amount, \\\"Min token0Amount is not reached\\\");\\n        require(token1Amount >= minToken1Amount, \\\"Min token1Amount is not reached\\\");\\n\\n        emit Withdrawal(msg.sender, token0Amount, token1Amount, amount);\\n        if (token0Amount > 0) {\\n            token0.safeTransfer(to, token0Amount);\\n        }\\n        if (token1Amount > 0) {\\n            token1.safeTransfer(to, token1Amount);\\n        }\\n    }\\n\\n    function _swap(IERC20 tokenFrom, IERC20 tokenTo, uint256 inputAmount, address to, uint256 minReturnAmount) private returns(uint256 outputAmount) {\\n        outputAmount = getReturn(tokenFrom, tokenTo, inputAmount);\\n        require(outputAmount > 0, \\\"Empty swap is not allowed\\\");\\n        require(outputAmount >= minReturnAmount, \\\"Min return not reached\\\");\\n        tokenFrom.safeTransferFrom(msg.sender, address(this), inputAmount);\\n        tokenTo.safeTransfer(to, outputAmount);\\n    }\\n\\n    /**\\n     * @dev We utilize binary search to find proper to swap\\n     *\\n     * Inital approximation of dx is taken from the same equation by assuming dx ~ dy\\n     *\\n     * x - dx     xBalance + dx\\n     * ------  =  ------------\\n     * y + dx     yBalance - dx\\n     *\\n     * dx = (x * yBalance - xBalance * y) / (xBalance + yBalance + x + y)\\n     */\\n    function _getVirtualAmountsForDepositImpl(uint256 x, uint256 y, uint256 xBalance, uint256 yBalance) private pure returns(uint256, uint256) {\\n        uint256 dx = (x * yBalance - y * xBalance) / (xBalance + yBalance + x + y);\\n        if (dx == 0) {\\n            return (x, y);\\n        }\\n        uint256 dy;\\n        uint256 left = dx * _LOWER_BOUND_NUMERATOR / _DENOMINATOR;\\n        uint256 right = Math.min(Math.min(dx * _UPPER_BOUND_NUMERATOR / _DENOMINATOR, yBalance), x);\\n\\n        while (left + _THRESHOLD < right) {\\n            dy = _getReturn(xBalance, yBalance, dx);\\n            int256 shift = _checkVirtualAmountsFormula(x - dx, y + dy, xBalance + dx, yBalance - dy);\\n            if (shift > 0) {\\n                left = dx;\\n                dx = (dx + right) / 2;\\n            } else if (shift < 0) {\\n                right = dx;\\n                dx = (left + dx) / 2;\\n            } else {\\n                break;\\n            }\\n        }\\n\\n        return (x - dx, y + dy);\\n    }\\n\\n    /**\\n     * @dev We utilize binary search to find proper amount to swap\\n     *\\n     * Inital approximation of dx is taken from the same equation by assuming dx ~ dy\\n     *\\n     * x - dx        firstTokenShare\\n     * ------  =  ----------------------\\n     * y + dx     _ONE - firstTokenShare\\n     *\\n     * dx = (x * (_ONE - firstTokenShare) - y * firstTokenShare) / _ONE\\n     */\\n    function _getRealAmountsForWithdrawImpl(uint256 virtualX, uint256 virtualY, uint256 balanceX, uint256 balanceY, uint256 firstTokenShare) private pure returns(uint256, uint256) {\\n        require(balanceX != 0 || balanceY != 0, \\\"Amount exceeds total balance\\\");\\n        if (firstTokenShare == 0) {\\n            return (0, virtualY + _getReturn(balanceX, balanceY, virtualX));\\n        }\\n\\n        uint256 secondTokenShare = _ONE - firstTokenShare;\\n        uint256 dx = (virtualX * secondTokenShare - virtualY * firstTokenShare) / _ONE;\\n        uint256 dy;\\n        uint256 left = dx * _LOWER_BOUND_NUMERATOR / _DENOMINATOR;\\n        uint256 right = Math.min(dx * _UPPER_BOUND_NUMERATOR / _DENOMINATOR, virtualX);\\n\\n        while (left + _THRESHOLD < right) {\\n            dy = _getReturn(balanceX, balanceY, dx);\\n            int256 shift = _checkVirtualAmountsFormula(virtualX - dx, virtualY + dy, firstTokenShare, secondTokenShare);\\n            if (shift > 0) {\\n                left = dx;\\n                dx = (dx + right) / 2;\\n            } else if (shift < 0) {\\n                right = dx;\\n                dx = (left + dx) / 2;\\n            } else {\\n                break;\\n            }\\n        }\\n\\n        return (virtualX - dx, virtualY + dy);\\n    }\\n\\n    /**\\n     * @dev\\n     *\\n     * Equilibrium is when ratio of amounts equals to ratio of balances\\n     *\\n     *  x      xBalance\\n     * --- == ----------\\n     *  y      yBalance\\n     *\\n     */\\n    function _checkVirtualAmountsFormula(uint256 x, uint256 y, uint256 xBalance, uint256 yBalance) private pure returns(int256) {\\n        unchecked {\\n            return int256(x * yBalance - y * xBalance);\\n        }\\n    }\\n\\n    function _powerHelper(uint256 x) private pure returns(uint256 p) {\\n        unchecked {\\n            if (x > _C3) {\\n                p = x - _C3;\\n            } else {\\n                p = _C3 - x;\\n            }\\n            p = p * p / _ONE;  // p ^ 2\\n            uint256 pp = p * p / _ONE;  // p ^ 4\\n            pp = pp * pp / _ONE;  // p ^ 8\\n            pp = pp * pp / _ONE;  // p ^ 16\\n            p = p * pp / _ONE;  // p ^ 18\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x41fb07d1babf09440f9110e672a0056354ca4d8059ad904c09f137cdd61f37e0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101975760003560e01c80638882eb62116100e3578063c755836b1161008c578063db5dadbf11610066578063db5dadbf146103dd578063dd62ed3e146103f0578063eac38e0c1461043657600080fd5b8063c755836b14610390578063cdc4e51d146103a3578063d21220a7146103b657600080fd5b8063a457c2d7116100bd578063a457c2d714610357578063a9059cbb1461036a578063c0a535111461037d57600080fd5b80638882eb621461031457806395d89b4114610327578063a41fe49f1461032f57600080fd5b806323b872dd116101455780635a7e9a5f1161011f5780635a7e9a5f146102b857806360336508146102cb57806370a08231146102de57600080fd5b806323b872dd14610261578063313ce5671461027457806339509351146102a557600080fd5b80630dfe1681116101765780630dfe1681146101fa57806318160ddd146102465780631e1401f81461024e57600080fd5b8062aeef8a1461019c57806306fdde03146101c2578063095ea7b3146101d7575b600080fd5b6101af6101aa366004612d5c565b610449565b6040519081526020015b60405180910390f35b6101ca61045f565b6040516101b99190612db4565b6101ea6101e5366004612e2a565b6104f1565b60405190151581526020016101b9565b6102217f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101b9565b6002546101af565b6101af61025c366004612e56565b610507565b6101ea61026f366004612e56565b61071d565b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020016101b9565b6101ea6102b3366004612e2a565b610805565b6101af6102c6366004612e97565b61084e565b6101af6102d9366004612ebe565b6109f8565b6101af6102ec366004612ee0565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6101af610322366004612efd565b610aa4565b6101ca610ee7565b61034261033d366004612d5c565b610ef6565b604080519283526020830191909152016101b9565b6101ea610365366004612e2a565b610f11565b6101ea610378366004612e2a565b610fe9565b6101af61038b366004612ebe565b610ff6565b6101af61039e366004612e97565b611084565b6103426103b1366004612f3c565b61120f565b6102217f000000000000000000000000000000000000000000000000000000000000000081565b6103426103eb366004612f84565b61142b565b6101af6103fe366004612fb6565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b610342610444366004612fef565b611449565b600061045784843385610aa4565b949350505050565b60606003805461046e9061302c565b80601f016020809104026020016040519081016040528092919081815260200182805461049a9061302c565b80156104e75780601f106104bc576101008083540402835291602001916104e7565b820191906000526020600020905b8154815290600101906020018083116104ca57829003601f168201915b5050505050905090565b60006104fe338484611773565b50600192915050565b6000808211610577576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f496e70757420616d6f756e742073686f756c64206265203e203000000000000060448201526064015b60405180910390fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa1580156105e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106089190613080565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa158015610678573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069c9190613080565b905080841115610708576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e70757420616d6f756e7420697320746f6f20626967000000000000000000604482015260640161056e565b610713828286611927565b9695505050505050565b600061072a848484611a03565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600160209081526040808320338452909152902054828110156107eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000606482015260840161056e565b6107f88533858403611773565b60019150505b9392505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490916104fe9185906108499086906130c8565b611773565b600073ffffffffffffffffffffffffffffffffffffffff83163014156108d0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5377617020746f207468697320697320666f7262696464656e00000000000000604482015260640161056e565b73ffffffffffffffffffffffffffffffffffffffff831661094d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5377617020746f207a65726f20697320666f7262696464656e00000000000000604482015260640161056e565b61099a7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000868686611cb8565b9050337f803540962ed9acbf87226c32486d71e1c86c2bdb208e771bab2fd8a626f61e896109c783611de7565b6109d0906130e0565b6109d987611de7565b6040805192835260208301919091520160405180910390a29392505050565b6000610a477f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000853386611cb8565b9050337f803540962ed9acbf87226c32486d71e1c86c2bdb208e771bab2fd8a626f61e89610a7485611de7565b610a7d84611de7565b610a86906130e0565b6040805192835260208301919091520160405180910390a292915050565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600090819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b579190613080565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610be7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0b9190613080565b9050600080610c1c89898686611e9d565b90925090506000610c2d82846130c8565b905060008111610c99576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f456d707479206465706f736974206973206e6f7420616c6c6f77656400000000604482015260640161056e565b73ffffffffffffffffffffffffffffffffffffffff8816301415610d19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4465706f73697420746f207468697320697320666f7262696464656e00000000604482015260640161056e565b6000610d2460025490565b90508015610d78576000828b8d610d3b898b6130c8565b610d4591906130c8565b610d4f91906130c8565b610d599190613119565b905080610d668385613130565b610d70919061319c565b975050610d7c565b8196505b87871015610de6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5368617265206973206e6f7420656e6f75676800000000000000000000000000604482015260640161056e565b610df08988611eee565b604080518c8152602081018c905290810188905273ffffffffffffffffffffffffffffffffffffffff8a16907f36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e9060600160405180910390a28a15610e9157610e9173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633308e61200e565b8915610ed957610ed973ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633308d61200e565b505050505050949350505050565b60606004805461046e9061302c565b600080610f0585338686611449565b90969095509350505050565b33600090815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915281205482811015610fd2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015260840161056e565b610fdf3385858403611773565b5060019392505050565b60006104fe338484611a03565b60006110457f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000853386611cb8565b9050337f803540962ed9acbf87226c32486d71e1c86c2bdb208e771bab2fd8a626f61e8961107283611de7565b61107b906130e0565b610a8686611de7565b600073ffffffffffffffffffffffffffffffffffffffff8316301415611106576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5377617020746f207468697320697320666f7262696464656e00000000000000604482015260640161056e565b73ffffffffffffffffffffffffffffffffffffffff8316611183576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5377617020746f207a65726f20697320666f7262696464656e00000000000000604482015260640161056e565b6111d07f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000868686611cb8565b9050337f803540962ed9acbf87226c32486d71e1c86c2bdb208e771bab2fd8a626f61e896111fd86611de7565b61120684611de7565b6109d9906130e0565b6000806000871161127c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f456d707479207769746864726177616c206973206e6f7420616c6c6f77656400604482015260640161056e565b73ffffffffffffffffffffffffffffffffffffffff86163014156112fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5769746864726177616c20746f207468697320697320666f7262696464656e00604482015260640161056e565b73ffffffffffffffffffffffffffffffffffffffff8616611379576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5769746864726177616c20746f207a65726f20697320666f7262696464656e00604482015260640161056e565b670de0b6b3a76400008511156113eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f526174696f2073686f756c6420626520696e205b302c20315d00000000000000604482015260640161056e565b60006113f660025490565b905061140233896120ea565b61140d8887836122d4565b9093509150611420878985858989612524565b509550959350505050565b60008061143b863387878761120f565b915091505b94509492505050565b600080600086116114b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f456d707479207769746864726177616c206973206e6f7420616c6c6f77656400604482015260640161056e565b73ffffffffffffffffffffffffffffffffffffffff8516301415611536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5769746864726177616c20746f207468697320697320666f7262696464656e00604482015260640161056e565b73ffffffffffffffffffffffffffffffffffffffff85166115b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5769746864726177616c20746f207a65726f20697320666f7262696464656e00604482015260640161056e565b60006115be60025490565b90506115ca33886120ea565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201528190889073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167c9190613080565b6116869190613130565b611690919061319c565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529093508190889073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611721573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117459190613080565b61174f9190613130565b611759919061319c565b9150611769868885858989612524565b5094509492505050565b73ffffffffffffffffffffffffffffffffffffffff8316611815576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161056e565b73ffffffffffffffffffffffffffffffffffffffff82166118b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161056e565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60008383018181670de0b6b3a76400008702816119465761194661316d565b049050600082858801670de0b6b3a764000002816119665761196661316d565b049050670de0b6b3a7640000850260008185611981856126d1565b672ef1cef240e848b802611994876126d1565b672ef1cef240e848b8028886670de05bc096e9c00002816119b7576119b761316d565b04010302816119c8576119c861316d565b049050670de0b6b3a76400006119e682670de0b6b3a7640000612740565b8802816119f5576119f561316d565b049998505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8316611aa6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161056e565b73ffffffffffffffffffffffffffffffffffffffff8216611b49576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161056e565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015611bff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161056e565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260208190526040808220858503905591851681529081208054849290611c439084906130c8565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611ca991815260200190565b60405180910390a35b50505050565b6000611cc5868686610507565b905060008111611d31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f456d7074792073776170206973206e6f7420616c6c6f77656400000000000000604482015260640161056e565b81811015611d9b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d696e2072657475726e206e6f74207265616368656400000000000000000000604482015260640161056e565b611dbd73ffffffffffffffffffffffffffffffffffffffff871633308761200e565b611dde73ffffffffffffffffffffffffffffffffffffffff86168483612756565b95945050505050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115611e99576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e74323536000000000000000000000000000000000000000000000000606482015260840161056e565b5090565b6000808484028684020381811315611ec557611ebb878787876127ac565b9093509150611769565b6000811215611ee357611eda868886886127ac565b93509150611769565b509495939450505050565b73ffffffffffffffffffffffffffffffffffffffff8216611f6b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161056e565b8060026000828254611f7d91906130c8565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604081208054839290611fb79084906130c8565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052611cb29085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612921565b73ffffffffffffffffffffffffffffffffffffffff821661218d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161056e565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090205481811015612243576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f6365000000000000000000000000000000000000000000000000000000000000606482015260840161056e565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208190526040812083830390556002805484929061227f908490613119565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161191a565b505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000908190819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015612365573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123899190613080565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015612419573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243d9190613080565b905060008561244c8985613130565b612456919061319c565b90506000866124658a85613130565b61246f919061319c565b9050600061247d82846130c8565b61248f670de0b6b3a764000085613130565b612499919061319c565b9050808910156124cc576124c283836124b28289613119565b6124bc8689613119565b8d612a2d565b9097509550612517565b8089111561250d5761250482846124e38288613119565b6124ed878a613119565b6124ff8e670de0b6b3a7640000613119565b612a2d565b97509550612517565b9195509350849084905b5050505050935093915050565b8184101561258e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4d696e20746f6b656e30416d6f756e74206973206e6f74207265616368656400604482015260640161056e565b808310156125f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4d696e20746f6b656e31416d6f756e74206973206e6f74207265616368656400604482015260640161056e565b604080518581526020810185905290810186905233907f650fdf669e93aa6c8ff3defe2da9c12b64f1548e5e1e54e803f4c1beb6466c8e9060600160405180910390a283156126825761268273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168786612756565b82156126c9576126c973ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168785612756565b505050505050565b6000670656e7dd8da1c9cf82111561270c57507ffffffffffffffffffffffffffffffffffffffffffffffffff9a91822725e3631810161271a565b81670656e7dd8da1c9cf0390505b670de0b6b3a7640000908002819004808002829004800282900480028290040204919050565b600081831061274f57816107fe565b5090919050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526122cf9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612068565b6000808085876127bc86886130c8565b6127c691906130c8565b6127d091906130c8565b6127da8688613130565b6127e4868a613130565b6127ee9190613119565b6127f8919061319c565b90508061280b5786869250925050611440565b6000806103e861281d6103e685613130565b612827919061319c565b905060006128566128506103e86128406103ea88613130565b61284a919061319c565b89612740565b8b612740565b90505b806128656001846130c8565b10156128fc57612876888886611927565b925060006128ad612887868d613119565b612891868d6130c8565b61289b888d6130c8565b6128a5888d613119565b910291020390565b905060008113156128d85784925060026128c783856130c8565b6128d1919061319c565b94506128f6565b60008112156128f05784915060026128c783856130c8565b506128fc565b50612859565b612906848b613119565b612910848b6130c8565b955095505050505094509492505050565b6000612983826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612c109092919063ffffffff16565b8051909150156122cf57808060200190518101906129a191906131d7565b6122cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161056e565b60008084151580612a3d57508315155b612aa3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f416d6f756e74206578636565647320746f74616c2062616c616e636500000000604482015260640161056e565b82612ac8576000612ab586868a611927565b612abf90886130c8565b91509150612c06565b6000612adc84670de0b6b3a7640000613119565b90506000670de0b6b3a7640000612af3868a613130565b612afd848c613130565b612b079190613119565b612b11919061319c565b90506000806103e8612b256103e685613130565b612b2f919061319c565b90506000612b556103e8612b456103ea87613130565b612b4f919061319c565b8d612740565b90505b80612b646001846130c8565b1015612be857612b758a8a86611927565b92506000612b99612b86868f613119565b612b90868f6130c8565b8b029088020390565b90506000811315612bc4578492506002612bb383856130c8565b612bbd919061319c565b9450612be2565b6000811215612bdc578491506002612bb383856130c8565b50612be8565b50612b58565b612bf2848d613119565b612bfc848d6130c8565b9650965050505050505b9550959350505050565b6060610457848460008585843b612c83576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161056e565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612cac91906131f9565b60006040518083038185875af1925050503d8060008114612ce9576040519150601f19603f3d011682016040523d82523d6000602084013e612cee565b606091505b5091509150612cfe828286612d09565b979650505050505050565b60608315612d185750816107fe565b825115612d285782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056e9190612db4565b600080600060608486031215612d7157600080fd5b505081359360208301359350604090920135919050565b60005b83811015612da3578181015183820152602001612d8b565b83811115611cb25750506000910152565b6020815260008251806020840152612dd3816040850160208701612d88565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b73ffffffffffffffffffffffffffffffffffffffff81168114612e2757600080fd5b50565b60008060408385031215612e3d57600080fd5b8235612e4881612e05565b946020939093013593505050565b600080600060608486031215612e6b57600080fd5b8335612e7681612e05565b92506020840135612e8681612e05565b929592945050506040919091013590565b600080600060608486031215612eac57600080fd5b833592506020840135612e8681612e05565b60008060408385031215612ed157600080fd5b50508035926020909101359150565b600060208284031215612ef257600080fd5b81356107fe81612e05565b60008060008060808587031215612f1357600080fd5b84359350602085013592506040850135612f2c81612e05565b9396929550929360600135925050565b600080600080600060a08688031215612f5457600080fd5b853594506020860135612f6681612e05565b94979496505050506040830135926060810135926080909101359150565b60008060008060808587031215612f9a57600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215612fc957600080fd5b8235612fd481612e05565b91506020830135612fe481612e05565b809150509250929050565b6000806000806080858703121561300557600080fd5b84359350602085013561301781612e05565b93969395505050506040820135916060013590565b600181811c9082168061304057607f821691505b6020821081141561307a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60006020828403121561309257600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156130db576130db613099565b500190565b60007f800000000000000000000000000000000000000000000000000000000000000082141561311257613112613099565b5060000390565b60008282101561312b5761312b613099565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561316857613168613099565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826131d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000602082840312156131e957600080fd5b815180151581146107fe57600080fd5b6000825161320b818460208701612d88565b919091019291505056fea264697066735822122086221e39f307408e9dd6b3ce95278b2cef177599a09d35c1cc582c2d10fb611464736f6c634300080a0033",
  "devdoc": {
    "details": "AMM that is designed for assets with stable price to each other e.g. USDC and USDT. It utilizes constant sum price curve x + y = const but fee is variable depending on the token balances. In most cases fee is equal to 1 bip. But when balances are at extreme ends it either lowers to 0 or increases to 20 bip. Fee calculations are explained in more details in `getReturn` method. Note that AMM does not support token with fees. Note that tokens decimals are required to be the same.",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256,uint256,uint256)": {
        "params": {
          "minShare": "minimal required amount of LP tokens received",
          "token0Amount": "amount of token0 to deposit",
          "token1Amount": "amount of token1 to deposit"
        },
        "returns": {
          "share": "amount of LP tokens received"
        }
      },
      "depositFor(uint256,uint256,address,uint256)": {
        "details": "fully balanced deposit happens when ratio of amounts of deposit matches ratio of balances. To make a fair deposit when ratios do not match the contract finds the amount that is needed to swap to equalize ratios and makes that swap virtually to capture the swap fees. Then final share is calculated from fair deposit of virtual amounts.",
        "params": {
          "minShare": "minimal required amount of LP tokens received",
          "to": "address that will receive tokens",
          "token0Amount": "amount of token0 to deposit",
          "token1Amount": "amount of token1 to deposit"
        },
        "returns": {
          "share": "amount of LP tokens received"
        }
      },
      "getReturn(address,address,uint256)": {
        "details": "`getReturn` at point `x = inputBalance / (inputBalance + outputBalance)`: `getReturn(x) = 0.9999 + (0.5817091329374359 - x * 1.2734233188154198)^17` When balance is changed from `inputBalance` to `inputBalance + amount` we should take integral of getReturn to calculate proper amount: `getReturn(x0, x1) = (integral (0.9999 + (0.5817091329374359 - x * 1.2734233188154198)^17) dx from x=x0 to x=x1) / (x1 - x0)` `getReturn(x0, x1) = (0.9999 * x - 3.3827123349983306 * (x - 0.4568073509746632) ** 18 from x=x0 to x=x1) / (x1 - x0)` `getReturn(x0, x1) = (0.9999 * (x1 - x0) + 3.3827123349983306 * ((x0 - 0.4568073509746632) ** 18 - (x1 - 0.4568073509746632) ** 18)) / (x1 - x0)` C0 = 0.9999 C2 = 3.3827123349983306 C3 = 0.4568073509746632 `getReturn(x0, x1) = (C0 * (x1 - x0) + C2 * ((x0 - C3) ** 18 - (x1 - C3) ** 18)) / (x1 - x0)`",
        "params": {
          "inputAmount": "amount of `tokenFrom` that user wants to sell",
          "tokenFrom": "token that user wants to sell",
          "tokenTo": "token that user wants to buy"
        },
        "returns": {
          "outputAmount": "amount of `tokenTo` that user will receive after the trade"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "swap0To1(uint256,uint256)": {
        "params": {
          "inputAmount": "amount of token0 to sell",
          "minReturnAmount": "minimal required amount of token1 to buy"
        },
        "returns": {
          "outputAmount": "amount of token1 bought"
        }
      },
      "swap0To1For(uint256,address,uint256)": {
        "params": {
          "inputAmount": "amount of token0 to sell",
          "minReturnAmount": "minimal required amount of token1 to buy",
          "to": "address that will receive tokens"
        },
        "returns": {
          "outputAmount": "amount of token1 bought"
        }
      },
      "swap1To0(uint256,uint256)": {
        "params": {
          "inputAmount": "amount of token1 to sell",
          "minReturnAmount": "minimal required amount of token0 to buy"
        },
        "returns": {
          "outputAmount": "amount of token0 bought"
        }
      },
      "swap1To0For(uint256,address,uint256)": {
        "params": {
          "inputAmount": "amount of token1 to sell",
          "minReturnAmount": "minimal required amount of token0 to buy",
          "to": "address that will receive tokens"
        },
        "returns": {
          "outputAmount": "amount of token0 bought"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "withdraw(uint256,uint256,uint256)": {
        "params": {
          "amount": "amount of LP tokens to burn",
          "minToken0Amount": "minimal required amount of token0",
          "minToken1Amount": "minimal required amount of token1"
        },
        "returns": {
          "token0Amount": "amount of token0 received",
          "token1Amount": "amount of token1 received"
        }
      },
      "withdrawFor(uint256,address,uint256,uint256)": {
        "params": {
          "amount": "amount of LP tokens to burn",
          "minToken0Amount": "minimal required amount of token0",
          "minToken1Amount": "minimal required amount of token1",
          "to": "address that will receive tokens"
        },
        "returns": {
          "token0Amount": "amount of token0 received",
          "token1Amount": "amount of token1 received"
        }
      },
      "withdrawForWithRatio(uint256,address,uint256,uint256,uint256)": {
        "details": "withdrawal with custom ratio is semantically equal to proportional withdrawal with extra swap afterwards to get to the specified ratio. The contract does exactly this by making virtual proportional withdrawal and then finds the amount needed for an extra virtual swap to achieve specified ratio.",
        "params": {
          "amount": "amount of LP tokens to burn",
          "minToken0Amount": "minimal required amount of token0",
          "minToken1Amount": "minimal required amount of token1",
          "to": "address that will receive tokens",
          "token0Share": "percentage of token0 to receive with 100% equals to 1e18"
        },
        "returns": {
          "token0Amount": "amount of token0 received",
          "token1Amount": "amount of token1 received"
        }
      },
      "withdrawWithRatio(uint256,uint256,uint256,uint256)": {
        "params": {
          "amount": "amount of LP tokens to burn",
          "minToken0Amount": "minimal required amount of token0",
          "minToken1Amount": "minimal required amount of token1",
          "token0Share": "percentage of token0 to receive with 100% equals to 1e18"
        },
        "returns": {
          "token0Amount": "amount of token0 received",
          "token1Amount": "amount of token1 received"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(uint256,uint256,uint256)": {
        "notice": "makes a deposit of both tokens to the AMM"
      },
      "depositFor(uint256,uint256,address,uint256)": {
        "notice": "makes a deposit of both tokens to the AMM and transfers LP tokens to the specified address"
      },
      "getReturn(address,address,uint256)": {
        "notice": "estimates return value of the swap"
      },
      "swap0To1(uint256,uint256)": {
        "notice": "swaps token0 for token1"
      },
      "swap0To1For(uint256,address,uint256)": {
        "notice": "swaps token0 for token1 and transfers them to specified receiver address"
      },
      "swap1To0(uint256,uint256)": {
        "notice": "swaps token1 for token0"
      },
      "swap1To0For(uint256,address,uint256)": {
        "notice": "swaps token1 for token0 and transfers them to specified receiver address"
      },
      "withdraw(uint256,uint256,uint256)": {
        "notice": "makes a proportional withdrawal of both tokens"
      },
      "withdrawFor(uint256,address,uint256,uint256)": {
        "notice": "makes a proportional withdrawal of both tokens and transfers them to the specified address"
      },
      "withdrawForWithRatio(uint256,address,uint256,uint256,uint256)": {
        "notice": "makes a withdrawal with custom ratio and transfers tokens to the specified address"
      },
      "withdrawWithRatio(uint256,uint256,uint256,uint256)": {
        "notice": "makes a withdrawal with custom ratio"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 120,
        "contract": "contracts/FixedRateSwap.sol:FixedRateSwap",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 126,
        "contract": "contracts/FixedRateSwap.sol:FixedRateSwap",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 128,
        "contract": "contracts/FixedRateSwap.sol:FixedRateSwap",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 130,
        "contract": "contracts/FixedRateSwap.sol:FixedRateSwap",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 132,
        "contract": "contracts/FixedRateSwap.sol:FixedRateSwap",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}